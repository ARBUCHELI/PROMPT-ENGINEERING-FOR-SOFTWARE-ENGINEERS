# USING GENERATIVE AI TO CREATE A PROGRAM FROM START TO FINISH
--------------------------------------------------------------

* Research Before a Project
---------------------------
At the start of a project, we are still figuring out what we want to do and how we want to accomplish it. Coming up with the combination of requirements, scope, and technologies used to 
make something can be challenging. From the outset of a task, Generative AI can help.

In the beginning, Generative AI can assist with fleshing out what needs to be accomplished. Consider prompts like

“Create requirements for a project that <description>.”
“What might an app that <description> need to do?”

These can help us brainstorm ideas for what our project should do.

Once we have a solid understanding of what we want to do, we can use Generative AI to figure out how we want to accomplish it. Generative AI can give us ideas for what technologies, 
frameworks, or languages to use for our ideas. Prompts such as:

	. “What language/library should I use for <task>?”

	. “What type of database should I use for <storage requirements>?”

None of these prompts will give us a final answer that we will just start creating with. Our Generative AI tool will likely produce a range of options, as well as explanations for each 
option. These can help guide us in a direction, using our best judgment in addition to the information the tool is providing.

Next, we will discuss using Generative AI once we’ve actually started coding.

* Instructions
--------------
Click on a sample prompt to see what using ChatGPT for research could look like!

Try starting with: “Create requirements for a project that uses a database which stores orders.”

Make sure to click the Send button in the workspace to send your message! It looks like a paper airplaneThe send button looks like a paper airplane.

Create requirements for a project that uses a database which stores orders.

Project: Order Management System
--------------------------------

Requirements:
-------------

	1. Database Setup: Choose a relational database (e.g., MongoDB, MySQL, PostgreSQL) and design schema for orders, customer info, items, status.

	2. Order Handling: Create orders with unique IDs and timestamps: Capture customer details and link with order items.

	3. Status Tracking: Define order statuses (e.g., pending, shipped), and allow status updates and timestamp tracking.

	4. User Access: Implement admin and user authentication, and amins can view and manage orders.

	5. Notifications: Email customers on status changes with info.

	6. Security: Encrypt sensitive data, and apply access controls to protect data.

	7. Reporting: Generate basic sales reports and trends.

	8. Error Handling: Validate inputs to prevent errors.

	9. Scalability: Design for growth in order volume.

	10. Interface: User-friendly interface for order management.

	11. Tech Stack: Choose backend (e.g., Django, Ruby on Rails), and utilize HTML, CSS, and JavaScript for frontend.

	12. Deployment: Deploy to a secure server environment.

These streamlined requirements cover key aspects of an Order Management System with a focus on efficiency and core functionalities. Additional details can be added as needed for specific 
project goals.

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Creating Starter Code
-----------------------
As we are developing something, we are often looking for code snippets and examples we can build off of to accomplish our goals. Generative AI tools can provide specific code in ways 
particularly matched to the problem at hand in a way more information sources can’t.

Whether its creating some logic, functions, or even classes, Generative AI can give us a solid starting point. Consider prompts like:

	. “Write Python code to connect to a Mongodb database and query the most recent order from the Orders table.”

	. “Create a Java snippet that sends a put request with a JSON object”.

These prompts could be improved with further details about what is trying to be achieved.

In both these examples, we could make the prompts more effective. When writing prompts, it can help to use clear language, define the purpose, and include important context. In the Python 
example, we might clarify more detail about what the Order database looks like, as well as some example Orders within the prompt.

Prompts such as these can give us a good start on whatever we are trying to do. But a start is rarely where we want to end up. In fact, sometimes there will be errors in our code we will 
have to fix later. We will next discuss continuing to shape our responses into a final and usable state.

* Instructions
--------------
Checkpoint 1 Enabled
1.
The code editor has one file open, script.py. You will be pasting code into this file.

Use FakeGPT to generate Python code to connect to a Mongodb database and query the most recent order from the Orders table.

Click Run in the workspace to check your code.


Write Python code to connect to a MongoDB database and query the most recent order from the Orders table.

To connect to a MongoDB database and query the most recent order from the "Orders" table, you can use the PyMongo library in Python. Here's an example code snippet:

from pymongo import MongoClient

# Connect to the MongoDB server
client = MongoClient("mongodb://localhost:27017")

# Access the database and collection
db = client["your_database_name"]
orders_collection = db["Orders"]

# Query the most recent order
most_recent_order = orders_collection.find_one({}, sort=[("order_date", -1)])

# Print the most recent order details
print("Most Recent Order:")
print("Order ID:", most_recent_order["order_id"])
print("Order Date:", most_recent_order["order_date"])
# Add more fields from your "Orders" table as needed

In this example, we create a MongoClient object to connect to the MongoDB server running on "localhost" at the default port "27017". Then, we access the desired database and collection 
using the db and orders_collection variables, respectively. Finally, we query the most recent order by calling the find_one() method on the collection with an empty filter and a sort 
parameter to sort the results based on the "order_date" field in descending order (-1 means descending order). The result is stored in the most_recent_order variable, which can be further 
processed as needed.

2.
Now, let’s run the file by typing the correct command in the Terminal. If you’re not sure how to run a python file, try asking FakeGPT!


Hint
This workspace uses python3. Did you use you run the script.py file by typing:

To run a Python file from the command line or terminal, you use the python command followed by the name of the Python file you want to run. Here's the basic syntax:

python filename.py

Replace filename.py with the actual name of your Python file. Make sure you're in the same directory as the file or provide the full path to the file if it's located in a different 
directory.

If you have multiple versions of Python installed, you might need to use python3 instead of python to specify a specific version. This is more common on systems where both Python 2 and 
Python 3 are installed.

python3 my_script.py

python3 script.py

and pressing the Enter key?

If you see an error in the Terminal, that’s alright! You ran the code correctly, but there is an error in the code.

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Debugging
-----------
Whether the code is ours or generated, the code will have errors at some point. It might not compile, might crash when run, or not behave the way we expect it to. Generative AI can assist 
us in understanding why a problem is occurring and how to fix it.

There are multiple ways we can approach debugging using Generative AI. Typically it is useful to:

	. Provide the code

	. Provide the error message or faulty behavior

Here it is important to provide enough context and information for the tool to identify and fix the problem. There is a large difference between asking “What’s wrong with the following 
code? <code>” versus “This code <code> is producing the following error <error> when testing with the following values <input>”.

Note: for security reasons, you can’t install new libraries in this workspace, so we’ve used fake commands and responses to give you a realistic experience while still maintaining a 
-----
secure environment.

* Instructions
--------------
Checkpoint 1 Enabled
1.
We created code to connect to a Mongodb database and query the most recent order from the Orders table, but it had an error in it. Let’s figure out how to fix it!

Ask FakeGPT about this error and use the provided command to try fixing the error.


Hint
This workspace uses python3. Did you use you install the pymongo file by typing:

pip3 install pymongo

and pressing the Enter key?

script.py
---------
from pymongo import MongoClient

# Connect to the MongoDB server
client = MongoClient("mongodb://localhost:27017")

# Access the database and collection
# Is this the correct database name?
db = client["your_database_name"]
orders_collection = db["Orders"]

# Query the most recent order
most_recent_order = orders_collection.find_one({}, sort=[("order_date", -1)])

# Print the most recent order details
print("Most Recent Order:")
print("Order ID:", most_recent_order["order_id"])
print("Order Date:", most_recent_order["order_date"])
# Add more fields from your "Orders" table as needed

Can you tell me more about this Python error:

Traceback (most recent call last):
  File "script.py", line 1, in module
    from pymongo import MongoClient
ModuleNotFoundError: No module named 'pymongo'

The error message you provided, known as a "traceback," indicates that there is an issue with importing the pymongo module in your Python script (script.py). Let's break down the error 
message:

1. The `Traceback (most recent call last):` line indicates that an error occurred while executing your script, and the following lines provide information about the error.

2. `File "script.py", line 1, in module` tells you that the error occurred in line 1 of the file script.py.

3. `from pymongo import MongoClient` is the line of code in your script that is causing the error.

4. `ModuleNotFoundError: No module named 'pymongo'` is the specific error message. It means that Python couldn't find the pymongo module, which is necessary for your script to work.

This error typically occurs when the required module (pymongo, in this case) is not installed in your Python environment. Here's how you can resolve this issue:


Install the Missing Module
--------------------------
Open your terminal or command prompt and use the following command to install the pymongo module:

pip install pymongo

If you're using Python 3, you might need to use pip3 instead of pip:

pip3 install pymongo

Output
------
$ pip3 install pymongo
Collecting pymongo
  Downloading pymongo-4.5.0-cp39-cp39-macosx_10_9_universal2.whl (529 kB)
     |████████████████████████████████| 529 kB 2.5 MB/s 
Collecting dnspython<3.0.0,>=1.16.0
  Downloading dnspython-2.4.2-py3-none-any.whl (300 kB)
     |████████████████████████████████| 300 kB 5.8 MB/s 
Installing collected packages: dnspython, pymongo
Successfully installed dnspython-2.4.2 pymongo-4.5.0

2.
Careful, we didn’t update the line:

db = client["your_database_name"]

to have the correct database name! pymongo might create a new database called your_database_name if we don’t specify the correct database.

Use FakeGPT to learn more about how pymongo might act in this situation. Next, fix the error.

Our database is actually named company_database. Update the line to be:

db = client["company_database"]

Press the Run button to check your code.

script.py
---------
from pymongo import MongoClient

# Connect to the MongoDB server
client = MongoClient("mongodb://localhost:27017")

# Access the database and collection
# Is this the correct database name?
db = client["company_database"]
orders_collection = db["Orders"]

# Query the most recent order
most_recent_order = orders_collection.find_one({}, sort=[("order_date", -1)])

# Print the most recent order details
print("Most Recent Order:")
print("Order ID:", most_recent_order["order_id"])
print("Order Date:", most_recent_order["order_date"])
# Add more fields from your "Orders" table as needed

3.
Now, let’s run the file by typing the correct command in the Terminal. If you’re not sure how to run a python file, try asking FakeGPT!


Hint
This workspace uses python3. Did you use you run the script.py file by typing:

python3 script.py

and pressing the Enter key?

If you see an error in the Terminal, that’s alright! You ran the code correctly, but there is an error in the code.

Output
------
$ python3 script.py
Most Recent Order:
Order ID: 5892
Order Date: 2023-08-20 15:30:00

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Adding Features
-----------------
Once the initial response of the Generative AI has been put into our program, we are rarely done. There are likely multiple steps we have left to do. Once we’ve gotten started, we might 
want additional functionality.

Generative AI tools’ ability to lookback on previous responses help it make these adjustments as we tweak what was initially produced. We are able to ask for new features. Tools like 
ChatGPT will often be able to modify what’s being discussed.

Consider prompts like the following:

	. Change the MongoDB query to find the 3 most recent orders

	. Change the title of the “order_date” attribute to “purchase_date”

	. Add functionality to delete the orders after receiving them

By continuing to work with and shape the final result, the tool can build more complex programs out of its initial responses. Developing with Generative AI can be a conversation, rather 
than a series of one-off interactions.

* Instructions
--------------
Checkpoint 1 Enabled
1.
We created code to connect to a Mongodb database and query the most recent order from the Orders table, but now we want to add new features.

Use FakeGPT to help you change the MongoDB query to find the 3 most recent orders.

You will need to update the code in script.py.

Press the Run button to check your code.


Hint
You should have replaced:

most_recent_order = orders_collection.find_one({}, sort=[("order_date", -1)])

with

most_recent_orders = orders_collection.find().sort("order_date", -1).limit(3)

You should have also replaced:

print("Order ID:", most_recent_order["order_id"])
print("Order Date:", most_recent_order["order_date"])

with

for order in most_recent_orders:
  print("Order ID:", order["order_id"])
  print("Order Date:", order["order_date"])

To modify the MongoDB query to find the three most recent orders instead of just one, you can use the `find()` method with the `limit()` and `sort()` methods in PyMongo. Here's an updated 
code snippet:


from pymongo import MongoClient

# Connect to the MongoDB server
client = MongoClient("mongodb://localhost:27017")

# Access the database and collection
db = client["your_database_name"]
orders_collection = db["Orders"]

# Query the three most recent orders
most_recent_orders = orders_collection.find().sort("order_date", -1).limit(3)

# Print the details of the three most recent orders
print("Three Most Recent Orders:")
for order in most_recent_orders:
  print("Order ID:", order["order_id"])
  print("Order Date:", order["order_date"])
  print("---")

In this updated code, we use the `find()` method to fetch all documents from the collection. Then, we apply the `sort()` method to sort the results based on the "order_date" field in 
descending order (`-1` means descending). Finally, we use the `limit()` method to restrict the result to three documents.

We iterate over `most_recent_orders` using a `for` loop and print the details of each order.

Make sure to replace `"your_database_name"` with the actual name of your database and `"Orders"` with the name of your collection ("table").

script.py
---------
from pymongo import MongoClient

# Connect to the MongoDB server
client = MongoClient("mongodb://localhost:27017")

# Access the database and collection
db = client["company_database"]
orders_collection = db["Orders"]

# Change this line to find three orders
most_recent_orders = orders_collection.find().sort("order_date", -1).limit(3)

# Change these lines to print the three most recent order details
for order in most_recent_orders:
print("Most Recent Order:")
print("Order ID:", most_recent_order["order_id"])
print("Order Date:", most_recent_order["order_date"])

2.
Next, let’s change the title of the “order_date” attribute to “purchase_date”.

Ask FakeGPT if you’re not sure how to do this!

Press the Run button to check your code.


Hint
You should have replaced:

most_recent_orders = orders_collection.find().sort("order_date", -1).limit(3)

with

most_recent_orders = orders_collection.find().sort("purchase_date", -1).limit(3)

You should have also replaced:

  print("Order Date:", order["order_date"])

with

print("Purchase Date:", order["purchase_date"])

To change the title of the "order_date" attribute to "purchase_date" in the MongoDB query, you need to update the field name in the code. Here's the modified code snippet:


from pymongo import MongoClient

# Connect to the MongoDB server
client = MongoClient("mongodb://localhost:27017")

# Access the database and collection
db = client["your_database_name"]
orders_collection = db["Orders"]

# Query the three most recent orders
most_recent_orders = orders_collection.find().sort("purchase_date", -1).limit(3)

# Print the details of the three most recent orders
print("Three Most Recent Orders:")
for order in most_recent_orders:
  print("Order ID:", order["order_id"])
  print("Purchase Date:", order["purchase_date"])
  print("---")

script.py
---------
from pymongo import MongoClient

# Connect to the MongoDB server
client = MongoClient("mongodb://localhost:27017")

# Access the database and collection
db = client["company_database"]
orders_collection = db["Orders"]

# Change this line to find three orders
most_recent_orders = orders_collection.find().sort("purchase_date", -1).limit(3)

# Change these lines to print the three most recent order details
for order in most_recent_orders:
print("Most Recent Order:")
print("Order ID:", most_recent_order["order_id"])
print("Purchase Date:", most_recent_order["purchase_date"])

3.
Now, let’s run the file by typing the correct command in the Terminal. If you’re not sure how to run a python file, try asking FakeGPT!


Hint
This workspace uses python3. Did you use you run the script.py file by typing:

python3 script.py

and pressing the Enter key?

If you see an error in the Terminal, that’s alright! You ran the code correctly, but there is an error in the code.

To run a Python file from the command line or terminal, you use the python command followed by the name of the Python file you want to run. Here's the basic syntax:

python filename.py

Replace filename.py with the actual name of your Python file. Make sure you're in the same directory as the file or provide the full path to the file if it's located in a different 
directory.

If you have multiple versions of Python installed, you might need to use python3 instead of python to specify a specific version. This is more common on systems where both Python 2 and 
Python 3 are installed.

python3 my_script.py

$ python3 script.py
Three Most Recent Orders:
Order ID: 5892
Purchase Date: 2023-08-20 15:30:00
---
Order ID: 5893
Purchase Date: 2023-08-19 10:45:00
---
Order ID: 5894
Purchase Date: 2023-08-18 14:20:00
---

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Using Generative AI as a Reference
------------------------------------
Throughout working with Generative AI tools, there might be various points at which we want to avoid using code directly and learn concepts, snippets, and ideas instead. We might not 
fully trust the tool’s outputs, which is reasonable, or want to code certain parts ourselves.

There are many ways Generative Tools can make suggestions while we remain the code’s primary author. Engineers are often using the tools as a reference, for learning, and simple 
assistance.

Rather than asking the tools for code for production use, consider prompts like the following:

	. Create some examples of using the axios library in Typescript.

	. Explain what the following code does: <code>

	. Explain the syntax for creating an embedded struct in Go.

	. What are the most important concepts to learn in Kubernetes? Provide examples of those concepts in practice.

While these prompts won’t get us code that makes it into our application, they can be helpful for deciding how we want to approach our own problems.

* Instructions
--------------
Click on a sample prompt to see what using ChatGPT for research could look like!

Create some examples of using the axios library in Typescript.

Certainly! Here are a few examples of using the Axios library in TypeScript:

1. Sending a GET request:


import axios from 'axios';

axios.get('https://api.example.com/users')
.then(response => {
console.log(response.data);
})
.catch(error => {
console.error(error);
});


2. Sending a POST request with JSON data:


import axios from 'axios';

const data = {
name: 'John Doe',
email: 'john.doe@example.com'
};

axios.post('https://api.example.com/users', data)
.then(response => {
console.log(response.data);
})
.catch(error => {
console.error(error);
});

In these examples, we import the Axios library and use its methods to make HTTP requests. The `.then()` function is used to handle successful responses, and the `.catch()` function is 
used to handle errors. The response data can be accessed through the `response.data` property.

Make sure to install the Axios library and set up your TypeScript project accordingly before using these examples. You can install Axios using npm or yarn (`npm install axios` or `yarn 
add axios`), and ensure that your TypeScript configuration is properly set up to use Axios and compile TypeScript code.

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Review
--------
Over the course of this lesson we’ve described ways to work with Generative AI tooling as we move through a programming project. At any stage, Generative AI can assist in speeding up the 
development in applications. We’ve discussed:

	. Using prompts during the design phase to discuss scope and tooling

	. Incorporating Generative AI outputs into the project itself

	. Further molding and debugging of AI output

	. Using AI as a reference throughout development

When working on future projects, you could consider using AI tools such as ChatGPT, Copilot, and Bard.

* Instructions
--------------
Use FakeGPT to explore more topics.

What are some AI topics I can explore?

The following is a non-exhaustive list of programming topics you can explore:
- Linear Regression
- Natural Language Processing
- R
- Data Cleaning
- PySpark

------------------------------------------------------------------------------------------------------------------------------------------------------------------






























































































































































