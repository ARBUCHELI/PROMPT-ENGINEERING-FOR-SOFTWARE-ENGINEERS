# USING GENERATIVE AI TO CREATE A PROGRAM FROM START TO FINISH
--------------------------------------------------------------

* Research Before a Project
---------------------------
At the start of a project, we are still figuring out what we want to do and how we want to accomplish it. Coming up with the combination of requirements, scope, and technologies used to 
make something can be challenging. From the outset of a task, Generative AI can help.

In the beginning, Generative AI can assist with fleshing out what needs to be accomplished. Consider prompts like

“Create requirements for a project that <description>.”
“What might an app that <description> need to do?”

These can help us brainstorm ideas for what our project should do.

Once we have a solid understanding of what we want to do, we can use Generative AI to figure out how we want to accomplish it. Generative AI can give us ideas for what technologies, 
frameworks, or languages to use for our ideas. Prompts such as:

	. “What language/library should I use for <task>?”

	. “What type of database should I use for <storage requirements>?”

None of these prompts will give us a final answer that we will just start creating with. Our Generative AI tool will likely produce a range of options, as well as explanations for each 
option. These can help guide us in a direction, using our best judgment in addition to the information the tool is providing.

Next, we will discuss using Generative AI once we’ve actually started coding.

* Instructions
--------------
Click on a sample prompt to see what using ChatGPT for research could look like!

Try starting with: “Create requirements for a project that uses a database which stores orders.”

Make sure to click the Send button in the workspace to send your message! It looks like a paper airplaneThe send button looks like a paper airplane.

Create requirements for a project that uses a database which stores orders.

Project: Order Management System
--------------------------------

Requirements:
-------------

	1. Database Setup: Choose a relational database (e.g., MongoDB, MySQL, PostgreSQL) and design schema for orders, customer info, items, status.

	2. Order Handling: Create orders with unique IDs and timestamps: Capture customer details and link with order items.

	3. Status Tracking: Define order statuses (e.g., pending, shipped), and allow status updates and timestamp tracking.

	4. User Access: Implement admin and user authentication, and amins can view and manage orders.

	5. Notifications: Email customers on status changes with info.

	6. Security: Encrypt sensitive data, and apply access controls to protect data.

	7. Reporting: Generate basic sales reports and trends.

	8. Error Handling: Validate inputs to prevent errors.

	9. Scalability: Design for growth in order volume.

	10. Interface: User-friendly interface for order management.

	11. Tech Stack: Choose backend (e.g., Django, Ruby on Rails), and utilize HTML, CSS, and JavaScript for frontend.

	12. Deployment: Deploy to a secure server environment.

These streamlined requirements cover key aspects of an Order Management System with a focus on efficiency and core functionalities. Additional details can be added as needed for specific 
project goals.

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Creating Starter Code
-----------------------
As we are developing something, we are often looking for code snippets and examples we can build off of to accomplish our goals. Generative AI tools can provide specific code in ways 
particularly matched to the problem at hand in a way more information sources can’t.

Whether its creating some logic, functions, or even classes, Generative AI can give us a solid starting point. Consider prompts like:

	. “Write Python code to connect to a Mongodb database and query the most recent order from the Orders table.”

	. “Create a Java snippet that sends a put request with a JSON object”.

These prompts could be improved with further details about what is trying to be achieved.

In both these examples, we could make the prompts more effective. When writing prompts, it can help to use clear language, define the purpose, and include important context. In the Python 
example, we might clarify more detail about what the Order database looks like, as well as some example Orders within the prompt.

Prompts such as these can give us a good start on whatever we are trying to do. But a start is rarely where we want to end up. In fact, sometimes there will be errors in our code we will 
have to fix later. We will next discuss continuing to shape our responses into a final and usable state.

* Instructions
--------------
Checkpoint 1 Enabled
1.
The code editor has one file open, script.py. You will be pasting code into this file.

Use FakeGPT to generate Python code to connect to a Mongodb database and query the most recent order from the Orders table.

Click Run in the workspace to check your code.


Write Python code to connect to a MongoDB database and query the most recent order from the Orders table.

To connect to a MongoDB database and query the most recent order from the "Orders" table, you can use the PyMongo library in Python. Here's an example code snippet:

from pymongo import MongoClient

# Connect to the MongoDB server
client = MongoClient("mongodb://localhost:27017")

# Access the database and collection
db = client["your_database_name"]
orders_collection = db["Orders"]

# Query the most recent order
most_recent_order = orders_collection.find_one({}, sort=[("order_date", -1)])

# Print the most recent order details
print("Most Recent Order:")
print("Order ID:", most_recent_order["order_id"])
print("Order Date:", most_recent_order["order_date"])
# Add more fields from your "Orders" table as needed

In this example, we create a MongoClient object to connect to the MongoDB server running on "localhost" at the default port "27017". Then, we access the desired database and collection 
using the db and orders_collection variables, respectively. Finally, we query the most recent order by calling the find_one() method on the collection with an empty filter and a sort 
parameter to sort the results based on the "order_date" field in descending order (-1 means descending order). The result is stored in the most_recent_order variable, which can be further 
processed as needed.

2.
Now, let’s run the file by typing the correct command in the Terminal. If you’re not sure how to run a python file, try asking FakeGPT!


Hint
This workspace uses python3. Did you use you run the script.py file by typing:

To run a Python file from the command line or terminal, you use the python command followed by the name of the Python file you want to run. Here's the basic syntax:

python filename.py

Replace filename.py with the actual name of your Python file. Make sure you're in the same directory as the file or provide the full path to the file if it's located in a different 
directory.

If you have multiple versions of Python installed, you might need to use python3 instead of python to specify a specific version. This is more common on systems where both Python 2 and 
Python 3 are installed.

python3 my_script.py

python3 script.py

and pressing the Enter key?

If you see an error in the Terminal, that’s alright! You ran the code correctly, but there is an error in the code.

------------------------------------------------------------------------------------------------------------------------------------------------------------------



















































