# USING GENERATIVE AI FOR PROGRAMMING TASKS
-------------------------------------------

* Introduction
--------------
Many software engineers are thinking about how to use AI-powered tools for programming. How can we use these? Will they replace us? The introduction of these tools has drawn a lot of 
attention.

In this lesson, we will discuss ways we can leverage text-based Generative AI tools, such as ChatGPT, to assist with various programming tasks. Some of what we will cover include:

	. Writing bash commands

	. Creating regular expressions

	. Making SQL queries

	. Testing and Refactoring

While exciting, these tools aren’t perfect, and we will also discuss their limitations and concerns.

Whether you’re an experienced software engineer or someone new to programming, AI tools can be leveraged to save us work and time. Let’s get started.

* Instructions
--------------
Checkpoint 1 Passed
1.
Throughout this lesson, you will be using the FakeGPT application. It allows you to select a prompt at the bottom and submit it to see the generated output.

Make sure to click the Send button in the workspace to send your message! It looks like a paper airplaneThe send button looks like a paper airplane.

You can also click the circle arrow to clear the output screen. Let’s run a couple of prompts to practice using Fake GPT.

Select the prompt to create code that outputs Hello, World!. Once the code is generated, copy the code and copy it into the hello.py file in the code editor.

Click Run to run the generated code.


Hint
Submit the Write Python code that says 'Hello, World!' prompt and copy the code to hello.py.

The code is:

print('Hello, World!')

Checkpoint 2 Passed
2.
Now, it’s time to generate more code!

Select the prompt “Write Python code that says hello to a specific person”. FakeGPT will generate code and instructions.

Copy the code to a new line of the hello.py file and follow the instructions to change the code to your chosen name.

Click Run to run the generated code.


Hint
Submit the Write Python code that says hello to a specific person. prompt, copy the code to hello.py, and replace John with your chosen name.

The code is:

name = "John"
print(f"Hello, {name}!")

hello.py
--------
print('Hello, World!')
name = "John"
print(f"Hello, {name}!")

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Bash Commands
---------------
The terminal is a powerful tool that allows us to write Bash commands that can read and manipulate our computer systems. Even for experienced programmers writing complex terminal commands 
can be challenging. There are an infinite number of useful commands, and we learn about new ones all the time.

When trying to work on a terminal or filesystem, we often wonder, “Is there a command for that?” With Generative AI tools, we have a new way to find out.

Simply ask the Generative AI tool for a command that does the task you are trying to do. Consider prompts like:

	. “What is a Terminal command that will list all of the files on my Mac in the file directory that begin with the current year?”

	. “What is the bash command that will squash my git history?”

	. “How can I use Command Prompt to search for program files that use the Customer class?”

Generative AI tools will often come up with a useful command for what we are trying to do!

It’s important to note that Generative AI tools can make mistakes. It is crucial to have a decent understanding of bash to ensure that we know what the commands are doing before we run 
them. One should be especially careful when running destructive commands such as ones that delete files like rm -rf <folder>.

* Instructions
--------------
Checkpoint 1 Passed
1.
The numbers.txt file contains different department phone numbers. Using the FakeGPT application, enter a prompt that will help you generate a bash command to extract phone numbers from a 
file.

The output will give you the bash command to run, along with generated instructions. Paste the FakeGPT’s supplied bash command into the terminal and follow the generated instructions to 
alter the command to work on the numbers.txt file.


Hint
Be sure to replace textfile.txt with numbers.txt in FakeGPT’s supplied command.

numbers.txt
-----------
Sales: 212-555-2101
Accounts: 212-555-2105
Reception: 212-555-2100
Warehouse: 212-555-2106

Bash Command:
-------------
grep -Eo '[0-9]{3}-[0-9]{3}-[0-9]{4}' numbers.txt

Let's break down the command:

* grep is the command for searching patterns in files.
* -E enables extended regular expressions, allowing us to use the {} syntax for specifying repetition.
* -o displays only the matching part of each line.
* [0-9]{3} matches three digits (0 to 9) in a sequence.
* [-] matches the hyphen (-) character.
* The pattern [0-9]{3}-[0-9]{3}-[0-9]{4} represents the format of a phone number with three digits followed by a hyphen, then another three digits, and finally another hyphen and four 
digits.

Replace textfile.txt with the name of the actual text file you want to search. Running this command will display all phone numbers found within the file, one per line.

Keep in mind that this pattern assumes the phone numbers are in the format xxx-xxx-xxxx. If the phone numbers in your file have a different format or if there are variations, you may need 
to adjust the regular expression pattern accordingly.


2.
If you click on the folder icon to the left of the numbers.txt tab, you will see a directory called tps_reports. Inside the tps_reports directory are reports of two different types:

.pdf
.csv
Use the FakeGPT application to generate a bash command that will list all the .csv files from a given directory.

The output will give you the bash command to run, along with generated instructions. Paste FakeGPT’s supplied bash command into the terminal and follow FakeGPT’s generated instructions to 
change the command to find the .csv files in the tps_reports directory.

Hint
Be sure to replace /path/to/directory with tps_reports in FakeGPT’s supplied command.

To find all files with a CSV extension in a directory, you can use the find command along with the -name option. Here's an example command:

Bash Command:
-------------

find /path/to/directory -type f -name "*.csv"

Replace /path/to/directory with the actual directory path you want to search. This command will recursively search the specified directory and its subdirectories for files with the 
extension ".csv" and display their paths.

Let's break down the command:

* find is the command for searching files and directories.
* /path/to/directory is the directory where the search will be performed. Replace it with the desired directory path.
* -type f specifies that we are searching for regular files (not directories or other file types).
* -name "*.csv" is the pattern we are searching for. It uses the wildcard * to match any sequence of characters and specifies the extension as ".csv".

Running this command will list all files with the CSV extension within the specified directory and its subdirectories.

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Writing Regular Expressions
-----------------------------
Regular expressions are syntax to describe patterns found within text. We often use them within bash commands, unit tests, or validation. The creation of regular expressions can be a 
time-consuming and frustrating task. The syntax is quite hard to read and errors are hard to spot. ChatGPT can help.

Use prompts like:

	. Write a regular expression that matches an email

	. Write a regular expression that matches a phone number

	. Write a regular expression that matches a URL

It is important to have a well-defined set of test cases to ensure that the created patterns are working as intended. Make sure to test your regular expressions in a safe environment in 
case there are small errors - one small mistake in a regular expression can make the whole thing useless! Online regular expression checkers can be helpful when testing your regular 
expression on a test case.

* Instructions
--------------
Checkpoint 1 Passed
1.
The data.md file has information on a few businesses. Each listing is a mix of information such as website, phone number, and associated email.

We previously learned that grep -Eo 'regex' data.md is a command that searches a file for a regex pattern.

Copy this command into the terminal and then use FakeGPT to get a regular expression for email addresses.

Replace the word regex with the generated pattern. Be sure the pasted regex is inside the quotes.


Hint
Replace regex in the below command with FakeGPT’s provided regular expression for emails. Be sure to keep the single quotes ' ' surrounding the regular expression in the command.

grep -Eo 'regex' data.md


Bash Command:
-------------
[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+.[a-zA-Z]{2,}

This regex matches most standard email addresses. It checks for alphanumeric characters, dots, underscores, percentages, plus/minus signs, followed by an at symbol (@), a domain name, a 
dot, and a top-level domain (TLD) with at least two characters.


2. 
Now, use FakeGPT to generate a regular expression for phone numbers.

Insert the generated regex into the bash command grep -Eo 'regex' data.md and run that in the terminal.


Hint
Replace regex in the below command with FakeGPT’s provided regular expression for phone numbers. Be sure to keep the single quotes ' ' surrounding the regular expression in the command.

grep -Eo 'regex' data.md


Bash Command:
-------------
+?[0-9]{1,3}-?[0-9]{3,}-?[0-9]{3,}

This regex matches phone numbers with or without a leading plus sign. It allows for optional dashes and expects a minimum of three digits in each section (country code, area code, and 
number).

data.md
-------
#### Buff's Car Wash (https://www.buff-it-clean.com)

- Phone: 212-555-6398
- Email: info@buff-it-clean.com

#### Eat Here Diner (https://www.eatherediner.com)

- Phone: 212-555-1012
- Email: eats@eatherediner.com

#### Boxed Delivery Service (https://www.boxedtogo.com)

- Phone: 212-555-5431
- Email: ship@boxedtogo.com

bash
----
$ grep -Eo '[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+.[a-zA-Z]{2,}' data.md
info@buff-it-clean.com
eats@eatherediner.com
ship@boxedtogo.com
$ grep -Eo '+?[0-9]{1,3}-?[0-9]{3,}-?[0-9]{3,}' data.md
212-555-6398
212-555-1012
212-555-5431

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Writing Database Queries
--------------------------
Database queries allow us to interact with the data stored in our databases. Writing queries that interact with or find data from a database are a big part of many programmers’ work. 
Finding complex but useful information from a big database can be hard. Hours can be spent creating a query that finds all the right data and presents it in a readable fashion.

Generative AI can help speed up this process! It can help provide information about the database structure, the information we want, and how the data should be presented. Your Generative 
AI tool can quickly generate our query.

Here are some examples:

	. Find the total sales and average sales per day for each month:

	. Find customers who have made at least three orders in a given month

	. Calculate the average rating for each product category, including categories with no products

While these queries might not always be correct, they will often give us some idea of how to reach our goal. However, be especially careful creating queries that modify or delete tables 
or their contents.

* Instructions
--------------
Checkpoint 1 Passed
1.
A database is set up that tracks customers, products, and orders. Use FakeGPT to select the prompt that retrieves customers with at least three orders.

Paste the generated query into the terminal and press the Enter key to run the query.


Hint
Use the prompt Create an SQL query that retrieves customers with at least three orders in March 2023 and run the generated query in the terminal.

bash
----

Terminal

$ SELECT c.CustomerId, c.Name 
..   FROM Customers c 
..   JOIN Orders o ON c.CustomerId = o.CustomerId 
..   WHERE YEAR(o.Date) = 2023 
..   AND MONTH(o.Date) = 3 
..   GROUP BY c.CustomerId, c.Name 
..   HAVING COUNT(o.CustomerId) >= 3;

CustomerId | Name
1          | John Doe
5          | Emily Johnson
10         | Ahmed Khan
15         | Mei Ling
20         | Alejandro Ramirez
$ 

2.
Now use FakeGPT to generate an SQL query that gets the running total of sales per day.

Paste the generated query into the terminal again and run it by pressing Enter.


Hint
Use the prompt Create an SQL query that retrieves the total sales for the week starting 2022-07-03 and run the generated query in the terminal.

bash
----
SELECT DATE(o.Date) AS Date, SUM(p.Price) OVER (ORDER BY o.Date) AS RunningTotal 
..   FROM Orders o 
..   JOIN Products p ON o.ProductId = p.ProductId 
..   WHERE o.Date BETWEEN DATE_ADD(2022-07-03, INTERVAL -7 DAY) AND CURDATE() 
..   GROUP BY DATE(o.Date) 
..   ORDER BY DATE(o.Date);

Date       | TotalSales
2022-07-03 | 550.75
2022-07-04 | 700.25
2022-07-05 | 800.80
2022-07-06 | 345.75
2022-07-07 | 490.10
2022-07-08 | 620.85
2022-07-09 | 395.25

Checkpoint 3 Passed
3.
Lastly, use FakeGPT to generate an SQL query that finds the 5 products with the highest sales.

Paste the generated query into the terminal and press Enter.


Hint
Use the prompt Create an SQL query that retrieves the top 5 products with the highest sales and run the generated query in the terminal.

$ SELECT p.ProductId, p.Description, SUM(p.Price) AS TotalSales 
..   FROM Products p 
..   JOIN Orders o ON p.ProductId = o.ProductId 
..   GROUP BY p.ProductId, p.Description 
..   ORDER BY TotalSales DESC 
..   LIMIT 5;

ProductId | Description        | TotalSales
5         | Widget X           | 500.00
10        | Gadget Y           | 450.50
3         | Gizmo Z            | 400.25
8         | Thingamajig A      | 350.75
15        | Whatchamacallit B   | 300.80

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Class Creation
----------------
Classes are behavior (methods) and data (attributes) representations of parts of our systems. While many modern IDEs can generate a base class with method signatures, ChatGPT can go a 
step further. When requesting a class, ChatGPT will be able to generate code accomplishing some of the class behaviors.

Consider prompts like the following:

	. Write a class for a bank account with a balance and the ability to withdraw and deposit funds

	. Create a class representing a TicTacToe game board

	. Create a class representing an enemy character with attributes such as hit points

Often this behavior will need to be checked, but Generative AI tools can quickly take you from a description to a working piece of software. Once the basic template is created, we can 
complete the complex tasks that Generative AI tools may struggle to do.

Make sure to double-check the initial implementation because AI code can often make errors such as infinite loops, memory mismanagement, and the “hallucination” of made-up libraries and 
functions.

* Instructions
--------------
Checkpoint 1 Enabled
1.
The code editor has three files open, bank.py, tictactoe.py, and enemy.py. You will be pasting code into each. At any point if you close one of the files, you can reopen it in the 
directory by clicking the folder icon to the left of the file tabs.

Click on the bank.py tab to make it the active file. Use FakeGPT to generate a Python class of a bank account with withdrawal and deposit capabilities. Once the code is generated, copy it 
and paste it into bank.py.

Click Run to see the result.


Hint
Copy and paste the generated bank account code into bank.py and run the code.

Write a Python class for a bank account with a balance and the ability to withdraw and deposit funds

class BankAccount:
  def __init__(self, initial_balance=0):
    self.balance = initial_balance

  def deposit(self, amount):
    self.balance += amount

  def withdraw(self, amount):
    if self.balance >= amount:
      self.balance -= amount
    else:
      print("Insufficient funds")

# Example usage:
account = BankAccount(1000)
print("Initial balance:", account.balance)

account.deposit(500)
print("Balance after deposit:", account.balance)

account.withdraw(200)
print("Balance after withdrawal:", account.balance)

Output
------

Initial balance: 1000
Balance after deposit: 1500
Balance after withdrawal: 1300


2.
Now make tictactoe.py the active file and use FakeGPT to generate a Python class of a tic-tac-toe board. Once the code is generated, copy and paste it into tictactoe.py.

Click Run to see the result.


Hint
Copy and paste the generated tic tac toe code into tictactoe.py and run the code.

Create a Python class representing a TicTacToe game board

class TicTacToeBoard:
  def __init__(self):
    self.board = [[" " for _ in range(3)] for _ in range(3)]

  def print_board(self):
    for row in self.board:
      print("|".join(row))
      print("-" * 5)

  def make_move(self, player, row, col):
    if self.board[row][col] == " ":
      self.board[row][col] = player
      return True
    else:
      print("Invalid move. Try again.")
      return False

# Example usage:
board = TicTacToeBoard()
board.make_move("X", 0, 0)
board.make_move("O", 1, 1)
board.make_move("X", 0, 1)
board.print_board()

Output
------
X|X| 
-----
 |O| 
-----
 | | 
-----


3.
Finally, make enemy.py the active file and use FakeGPT to generate a Python class of an enemy character. Once the code is generated, copy and paste it into enemy.py.

Click Run to see the result.


Hint
Copy and paste the generated enemy character code into enemy.py and run the code.

3.
Finally, make enemy.py the active file and use FakeGPT to generate a Python class of an enemy character. Once the code is generated, copy and paste it into enemy.py.

Click Run to see the result.


Hint
Copy and paste the generated enemy character code into enemy.py and run the code.

 representing a TicTacToe game board
Create a Python class representing an enemy character with attributes such as hit points
Create a Python class representing an enemy character with attributes such as hit points

class EnemyCharacter:
  def __init__(self, name, hit_points, attack_power):
    self.name = name
    self.hit_points = hit_points
    self.attack_power = attack_power

  def attack(self, target):
    print(f"{self.name} attacks {target} and does {self.attack_power} damage.")

# Example usage:
enemy = EnemyCharacter("Goblin", 50, 10)
enemy.attack("Player")

Goblin attacks Player and does 10 damage.

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Generate Unit Tests
---------------------
We know that AI code can often make errors such as infinite loops, memory mismanagement, and the “hallucination” of made-up libraries and functions.

With all of the code we write, we need a way to ensure it works. When incorporating code written by AI into our projects, testing becomes even more important!

Generative AI tools can help us test our code, by generating data for tests as well as generating the test code itself. Consider prompts like:

	. Generate test data for a function that takes in an email and password as parameters

	.Create a Python division function as well as unit tests

	. Create tests for the following function:

def times_two(x):
  return 2 * x

As with all other use cases, we cannot rely purely on Generative AI. Testing code should be inspected to ensure it is behaving properly, and care should be taken that important inputs are 
covered. Unit tests are created to ensure our code is not failing, so we must avoid faulty unit tests!

The code editor has two files open, division.py, and email.py. You will be pasting code into each. At any point, if you close one of the files, you can reopen it in the directory by 
clicking the folder icon to the left of the file tabs.

* Instructions
--------------
Checkpoint 1 Enabled
1.
With division.py as the active file, use FakeGPT to generate a Python division function with some test code. Once the code is generated, copy it and paste it into division.py.

Click Run to see the result.


Hint
Copy and paste the generated test code into division.py and run the code.

Create a python division function as well as unit tests

import unittest

def divide(dividend, divisor):
    if divisor == 0:
        raise ValueError("Cannot divide by zero")
    return dividend / divisor

class DivisionTestCase(unittest.TestCase):
    def test_divide(self):
        self.assertEqual(divide(10, 2), 5)
        self.assertAlmostEqual(divide(7, 3), 2.3333333333333335)
        self.assertEqual(divide(0, 5), 0)
    
    def test_divide_by_zero(self):
        with self.assertRaises(ValueError):
            divide(10, 0)

if __name__ == "__main__":
    unittest.main()

In this example, the divide() function takes two arguments, dividend and divisor, and returns the result of dividing the dividend by the divisor. It also handles the case when the divisor 
is zero by raising a ValueError.

The unittest module is used to define test cases. In the DivisionTestCase class, two test methods are defined. The test_divide() method tests the division function with different inputs 
and verifies the expected results using assertions. The test_divide_by_zero() method tests that dividing by zero raises a ValueError as expected.

By running the script, the unit tests are executed, and any assertion errors or exceptions are reported. If all tests pass without any errors, you will see an output indicating the number 
of tests run and their success status.

You can further expand the test cases to cover more scenarios and edge cases based on your specific requirements.

Output
------
..
----------------------------------------------------------------------
Ran 2 tests in 0.000s

OK

2.
Now make email.py active file and use FakeGPT to generate code to create email and password test data.

Paste the code into email.py and run it.


Hint
Copy and paste the generated test code into email.py and run the code.

Create a set of functions that generate test data for testing a function that takes in an email and password as parameters

import random
import string

def generate_test_data(num_samples):
    test_data = []
    for _ in range(num_samples):
        # Generate a random email
        email = generate_random_email()

        # Generate a random password
        password = generate_random_password()

        # Append the email and password to the test data
        test_data.append((email, password))

    return test_data

def generate_random_email():
    domains = ['gmail.com', 'yahoo.com', 'hotmail.com', 'example.com']
    username_length = random.randint(5, 12)
    username = ''.join(random.choices(string.ascii_lowercase, k=username_length))
    domain = random.choice(domains)
    return f"{username}@{domain}"

def generate_random_password():
    password_length = random.randint(8, 16)
    characters = string.ascii_letters + string.digits + string.punctuation
    password = ''.join(random.choices(characters, k=password_length))
    return password

# Generate 10 test data samples
test_data = generate_test_data(10)

# Print the generated test data
for email, password in test_data:
    print(f"Email: {email}, Password: {password}")

In this example, the generate_test_data function generates a specified number of test data samples. For each sample, it generates a random email using the generate_random_email function 
and a random password using the generate_random_password function. The test data is stored as tuples of (email, password).

The generate_random_email function randomly selects a domain from a list of common email domains and generates a random username using lowercase letters.

The generate_random_password function generates a random password with a random length between 8 and 16 characters. It includes a combination of uppercase letters, lowercase letters, 
digits, and punctuation characters.

Finally, the generated test data is printed to demonstrate the result. You can adjust the num_samples parameter to generate the desired number of test data samples.

Ouput
-----
Email: xcnzjjfxa@yahoo.com, Password: Uzri$\HcCS>.@Px
Email: kgayxfi@hotmail.com, Password: )K:Hqv{iF
Email: bbchw@yahoo.com, Password: <;ey6AlAvBt
Email: uasthfurzb@gmail.com, Password: J*G'rEVlW
Email: pqpudkwtmigq@hotmail.com, Password: Y)5>n=-8"
Email: zusjltefxk@hotmail.com, Password: {ijk11LSl|
Email: cvdujrxkcnib@yahoo.com, Password: SC/{Ka4@lHns
Email: sozflqsb@gmail.com, Password: q3HqWKwA%hGe
Email: yirgodx@example.com, Password: `pp:B:"8g([iS}
Email: bwvxrhysltip@yahoo.com, Password: kZH}Bv:Cp

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Refactoring
-------------
In addition to generating new code, ChatGPT can be used for various tasks that involve modifying existing code.

ChatGPT can translate between programming languages, provide comments, suggest improvements, rename variables, and more!

Consider using ChatGPT with prompts like the following:

	. Translate the following code from Java to Python:

	. Make the following code more readable:

	. Add comments to the following code:

As with everything else, ChatGPT can introduce errors into previously working code. Be sure to inspect and test anything ChatGPT creates.

The code editor has three files open, readable.go, translate.go, and comment.go. You will be pasting code into each. At any point, if you close one of the files, you can reopen it in the 
directory by clicking the folder icon to the left of the file tabs.

* Instructions
--------------
Checkpoint 1 Enabled
1.
Ensure readable.go is the active file and use FakeGPT to generate more readable Go code given some input code. Once the new code is generated, copy and paste it into readable.go.

Click Run to see the result.


Hint
Copy and paste the generated code into readable.go and run the code.

Make the following code more readable

original.go
-----------
package main
import "fmt"
func twoSum(nums []int, target int) []int {
    m := make(map[int]int);
    for i, k := range nums {
        key := target - k
        v, ok := m[k]
        if ok {
            return []int {v, i}
        }
        m[key] = i
    }
    return []int {0,0}
}
func main() {
    a := []int{2, 7, 11, 15}
    b := 9
    c := twoSum(a, b)
    fmt.Println(c)
}

readable.go
-----------
package main

import "fmt"
      
func twoSum(nums []int, target int) []int {
    numMap := make(map[int]int)

    for i, num := range nums {
        complement := target - num

        if index, ok := numMap[num]; ok {
            return []int{index, i}
        }

        numMap[complement] = i
    }

    return []int{0, 0}
}

func main() {
    nums := []int{2, 7, 11, 15}
    target := 9

    result := twoSum(nums, target)
    fmt.Println(result)
}

2.
Now make translate.go the active file. Use FakeGPT to translate Python code to Go code. Copy the generated code into translate.go.

click Run to see the result.


Hint
Copy and paste the generated code into translate.go and run the code.

Make the following code more readable

translate-1.py
--------------
def fibonacci(limit):
    num1, num2 = 0, 1
    print(num1, end=" ")
    while num2 <= limit:
        print(num2, end=" ")
        num1, num2 = num2, num1 + num2

fibonacci(100)

translate-1.go
--------------
package main

import "fmt"

func fibonacci(limit int) {
    num1, num2 := 0, 1
    fmt.Print(num1, " ")
    for num2 <= limit {
        fmt.Print(num2, " ")
        num1, num2 = num2, num1 + num2
    }
}

func main() {
    fibonacci(100)
}

3.
Lastly, make comment.go the active file and have FakeGPT add comments to the given Go code. Copy and paste the generated code into comment.go and run it.


Hint
Copy and paste the generated code into comment.go and run the code.

comment-1.go
------------
package main

import (
    "fmt"
    "math"
)

func reverse(x int) int {
    negative := x < 0
    if negative {
        x *= -1
    }    

    var reversed int
    
    for x > 0 {
        reversed += x % 10
        if (x >= 10) {
            reversed *= 10
        }
        x /= 10
        fmt.Println(reversed, x)
    }

    if negative {
        reversed *= -1
    }

    if float64(reversed) < (-1 * (math.Pow(2,31))) || float64(reversed) > (math.Pow(2,31)-1) {
        return 0;
    } 

    return reversed
}

func main() {
    x := 12345
    result := reverse(x)
    fmt.Println("Reversed number:", result)
}

comment-2.go
------------
package main

import (
    "fmt"
    "math"
)
      
func reverse(x int) int {
    negative := x < 0  // Check if x is negative
    if negative {
        x *= -1  // Convert x to positive
    }

    var reversed int  // Variable to store the reversed number

    // Reverse the digits of x
    for x > 0 {
        reversed += x % 10  // Add the last digit of x to reversed
        if x >= 10 {
            reversed *= 10  // Multiply reversed by 10 if there are more digits remaining
        }
        x /= 10  // Remove the last digit of x
        fmt.Println(reversed, x)  // Print intermediate results (optional)
    }

    if negative {
        reversed *= -1  // Convert reversed back to negative if x was negative
    }

    // Check for integer overflow
    if float64(reversed) < (-1 * (math.Pow(2,31))) || float64(reversed) > (math.Pow(2,31)-1) {
        return 0  // Return 0 if the reversed number is out of the signed 32-bit integer range
    }

    return reversed  // Return the reversed number
}

func main() {
    x := 12345  // The number to be reversed
    result := reverse(x)  // Call the reverse function with x and store the result
    fmt.Println("Reversed number:", result)
}

Output
------
50 1234
540 123
5430 12
54320 1
54321 0
Reversed number: 54321

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Review
--------
Throughout this lesson, we established that ChatGPT can be used for many programming tasks.

Some of the ways that ChatGPT can best help includes tasks like:

	. Creating bash commands and regular expressions

	. Writing SQL queries

	. Making classes and unit tests

	. Refactoring code in many forms

With all of these tasks, ChatGPT can make mistakes. Anything produced by ChatGPT is unverified and should be reviewed.

While ChatGPT is useful, it is far from replacing a software engineer. It’s best to think of ChatGPT as a helpful assistant that needs to be combined with real development experience.

Next time you’re creating code, try incorporating the help of ChatGPT!

* Instructions
--------------
Use FakeGPT to explore more topics available on the Codecademy Platform.
























































































































































































